package com.log.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.log.api.model.LogContent;
import com.log.api.util.KafkaReceiver;
import com.log.api.service.KafkaSender;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertTrue;

@ActiveProfiles("test")
@DirtiesContext
@SpringBootTest
@AutoConfigureMockMvc
@EmbeddedKafka(partitions = 1, brokerProperties = { "listeners=PLAINTEXT://localhost:9092", "port=9092" })

class LogApiApplicationTests {

    @Autowired
    private KafkaReceiver receiver;

    @Autowired
    private KafkaSender sender;

    @Value("${kafka.topic}")
    private String topic;

    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
    @Autowired
    MockMvc mockMvc;
    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
    @Autowired
    ObjectMapper mapper;

    private Path workingDir;

    /*
        NOT testing as a scope from rest call (For the we can use RequestBuilder and @WebMvcTest)
        Instead concentrating on Kafka send and receive behavior
     */
    @Test
    public void checkEmbeddedKafkaSend_thenMessageReceived()
            throws Exception {
        LocalDateTime dateTime = LocalDateTime.parse("2023-03-26T11:50:55");
        LogContent logContent = new LogContent("fromLegacy222", "a101", "DEBUG", dateTime, "My json test message");

        sender.sendMessage(topic, logContent);

        boolean messageConsumed = receiver.getLatch().await(10, TimeUnit.SECONDS);
        assertTrue(messageConsumed);
        String payload=receiver.getPayload();
        ObjectMapper objectMapper = new ObjectMapper();
        // Below statement is to support datetime from JSON payload
        objectMapper.registerModule(new JavaTimeModule());
        LogContent logContentFromPayload = objectMapper.readValue(payload, LogContent.class);
        assertTrue(logContentFromPayload.getApplicationID().equals(logContent.getApplicationID()));
        assertTrue(logContentFromPayload.getTraceId().equals(logContent.getTraceId()));
        assertTrue(logContentFromPayload.getSeverity().equals(logContent.getSeverity()));
        assertTrue(logContentFromPayload.getTimestamp().equals(dateTime));
        assertTrue(logContentFromPayload.getMessage().equals(logContent.getMessage()));
    }
    // Check if Log file generated by logback or not
    // then check the log content
    // For checking log content need to hit rest call
    // You can say partially it is somewhat similar to integration test
    @Test
    public void logFileExistAndCheckContent() throws Exception {
        //initialize the this.workingDir with path of log file
        this.workingDir = Path.of("", "./logs");
        //create log content to be saved in log file
        LocalDateTime dateTime = LocalDateTime.parse("2023-03-26T11:50:55");
        LogContent logContent = new LogContent("fromLegacy223", "a103", "INFO", dateTime, "My json file test message");
        //hit rest call to - http://localhost:8000/v1/savelog/file
        // so that log file will be generated and LogContent will be saved to log file
        // Please notice the logger statement in controller under section for 'destinationFile'
        this.mockMvc.perform(MockMvcRequestBuilders.post("/v1/savelog/file")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .content(this.mapper.writeValueAsString(logContent)));
        File fileMicroService = new File("./logs/microservice.log");
        assertTrue(fileMicroService.exists());
        Path file = this.workingDir.resolve("microservice.log");
        String content = Files.readString(file);
        assertTrue(content.contains("Request payload LogContent{applicationID='fromLegacy223', traceId='a103', severity='INFO', timestamp="+dateTime+", message='My json file test message'}"));
    }
}

